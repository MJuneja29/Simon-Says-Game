/**
 * @file A simple Simon game implementation in JavaScript.
 * @author [Manav Juneja]
 */

//--------------------------------------------------------------------------------
// # Game State Variables
//--------------------------------------------------------------------------------

/**
 * Stores the sequence of colors generated by the game.
 * @type {string[]}
 */
let gameSeq = [];

/**
 * Stores the sequence of colors clicked by the user.
 * @type {string[]}
 */
let userSeq = [];

/**
 * An array of button colors available in the game.
 * @type {string[]}
 */
let btns = ["yellow", "red", "purple", "green"];

/**
 * A boolean flag to track whether the game has started.
 * @type {boolean}
 */
let started = false;

/**
 * The current level of the game.
 * @type {number}
 */
let level = 0;

/**
 * A reference to the h2 element for displaying game status.
 * @type {HTMLElement}
 */
let h2 = document.querySelector("h2");


//--------------------------------------------------------------------------------
// # Game Initialization
//--------------------------------------------------------------------------------

/**
 * Listens for a keypress event to start the game.
 * The game will only start if it has not already been started.
 */
document.addEventListener("keypress", function() {
    if (started == false) {
        console.log("Game is started!");
        started = true;
        levelUp();
    }
});


//--------------------------------------------------------------------------------
// # Visual Feedback Functions
//--------------------------------------------------------------------------------

/**
 * Flashes a button to indicate it's part of the game sequence.
 * @param {HTMLElement} btn - The button element to flash.
 */
function gameFlash(btn) {
    setTimeout(function() {
        btn.classList.add("flash");
    }, 500);
    setTimeout(function() {
        btn.classList.remove("flash");
    }, 850);
}

/**
 * Flashes a button to provide feedback on a user's click.
 * @param {HTMLElement} btn - The button element to flash.
 */
function userFlash(btn) {
    btn.classList.add("userflash");
    setTimeout(function() {
        btn.classList.remove("userflash");
    }, 250);
}


//--------------------------------------------------------------------------------
// # Game Logic
//--------------------------------------------------------------------------------

/**
 * Advances the game to the next level.
 * Resets the user sequence, increments the level, and displays the new level.
 * A new random color is added to the game sequence and the corresponding button is flashed.
 */
function levelUp() {
    userSeq = [];
    level++;
    h2.innerText = `Level ${level}`;

    let randIdx = Math.floor(Math.random() * 4); // Corrected to include all 4 colors
    let randColor = btns[randIdx];
    let randBtn = document.querySelector(`.${randColor}`);
    gameSeq.push(randColor);
    console.log(gameSeq);
    gameFlash(randBtn);
}

/**
 * Checks the user's answer at a given index against the game's sequence.
 * If the answer is correct and the user has completed the sequence for the current level, the game levels up.
 * If the answer is incorrect, the game is over.
 * @param {number} idx - The index of the user's sequence to check.
 */
function checkAns(idx) {
    if (userSeq[idx] === gameSeq[idx]) {
        if (userSeq.length == gameSeq.length) {
            setTimeout(levelUp, 1000); // Corrected: Pass the function reference, not the result of its execution
        }
    } else {
        h2.innerHTML = `Game over! Your score was <b>${level}</b><br>Press any key to start`;
        document.querySelector("body").style.backgroundColor = "red";
        setTimeout(function() {
            document.querySelector("body").style.backgroundColor = "white";
        }, 150);
        reset();
    }
}


//--------------------------------------------------------------------------------
// # User Input Handling
//--------------------------------------------------------------------------------

/**
 * Handles the click event for each game button.
 * Provides visual feedback, records the user's color choice, and checks the answer.
 */
function btnPress() {
    let btn = this;
    userFlash(btn);

    let userColor = btn.id;
    userSeq.push(userColor);

    checkAns(userSeq.length - 1);
}

/**
 * Selects all button elements and attaches the click event listener.
 * @type {NodeListOf<HTMLElement>}
 */
let allBtns = document.querySelectorAll(".btn");
for (let btn of allBtns) {
    btn.addEventListener("click", btnPress);
}


//--------------------------------------------------------------------------------
// # Game Reset
//--------------------------------------------------------------------------------

/**
 * Resets the game to its initial state.
 * Clears the game and user sequences, and resets the started flag and level.
 */
function reset() {
    started = false;
    gameSeq = [];
    userSeq = [];
    level = 0;
}